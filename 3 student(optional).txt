//3 student


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {
    // Define the Student structure
    struct Student {
        uint id;
        string name;
        uint age;
        string course;
    }

    // Declare the array to store students
    Student[] public students;

    // Variable to keep track of the next available student ID
    uint public nextStudentId = 0;

    // Function to add a single student
    function addStudent(string memory _name, uint _age, string memory _course) public {
        Student memory newStudent = Student({
            id: nextStudentId,
            name: _name,
            age: _age,
            course: _course
        });

        students.push(newStudent);
        nextStudentId++;  // Increment the ID for the next student
    }

    // Function to add multiple students at once
    function addMultipleStudents(
        string[] memory _names,
        uint[] memory _ages,
        string[] memory _courses
    ) public {
        require(
            _names.length == _ages.length && _ages.length == _courses.length,
            "Arrays must have the same length"
        );

        for (uint i = 0; i < _names.length; i++) {
            addStudent(_names[i], _ages[i], _courses[i]);
        }
    }

    // Function to retrieve student by ID
    function getStudent(uint _id) public view returns (uint, string memory, uint, string memory) {
        require(_id < students.length, "Student does not exist.");
        Student memory student = students[_id];
        return (student.id, student.name, student.age, student.course);
    }
}
